import { apiRequest, buildResourcesEndpoint } from "../data/infrastructure/apiClient.js";

/**
 * DentalPlanService
 * Resource type: 'dental-plan'
 * Uses unified resources API: /api/resources/{businessId}-{locationId}
 * Header: X-Resource-Type: dental-plan
 * resource_id refers to the patient's resource_id
 */
class DentalPlanService {
  constructor() {
    this.resourceType = "dental-plan";
  }

  /**
   * Get the full dental plan for a patient.
   * Returns an array of plan items: {
   *   id: string,
   *   toothNumber?: number | null,
   *   title: string,
   *   durationMinutes?: number,
   *   price?: number,
   *   notes?: string
   * }
   */
  async getPlan(patientId) {
    if (!patientId) return [];
    const endpoint = buildResourcesEndpoint("");
    const query = new URLSearchParams({ resource_id: String(patientId) }).toString();
    const url = `${endpoint}?${query}`;
    const response = await apiRequest(this.resourceType, url, { method: "GET" });
    const payload = Array.isArray(response?.data) ? response.data : Array.isArray(response) ? response : [];
    return payload.map((item) => {
      const data = item?.data && typeof item.data === "object" ? item.data : item;
      return {
        id: String(data.id || crypto.randomUUID?.() || `${Date.now()}-${Math.random()}`),
        toothNumber: data.toothNumber ?? null,
        title: data.title || "",
        durationMinutes: Number.isFinite(data.durationMinutes) ? data.durationMinutes : undefined,
        price: Number.isFinite(data.price) ? data.price : undefined,
        notes: data.notes || "",
      };
    });
  }

  /**
   * Upsert the entire plan list for the patient in one call.
   * items: array of plan items (order matters)
   */
  async upsertPlan(patientId, items) {
    if (!patientId) return [];
    const endpoint = buildResourcesEndpoint("");
    const query = new URLSearchParams({ patientId: String(patientId) }).toString();
    const url = `${endpoint}?${query}`;
    
    // Include patientId in the data field since resourceId is generated by another server
    const body = JSON.stringify({ 
      items,
      data: { patientId: String(patientId) }
    });
    const response = await apiRequest(this.resourceType, url, { method: "PUT", body });
    const payload = Array.isArray(response?.data) ? response.data : Array.isArray(response) ? response : [];
    return payload;
  }

  /**
   * Generate a PDF for the plan on the server or return data URL if supported.
   * Returns { pdfUrl?: string, dataUrl?: string }
   */
  async generatePdf(patientId, items) {
    if (!patientId) return { dataUrl: "" };
    const endpoint = buildResourcesEndpoint("/pdf");
    const query = new URLSearchParams({ resource_id: String(patientId) }).toString();
    const url = `${endpoint}?${query}`;
    
    // Include patientId in the data field since resourceId is generated by another server
    const body = JSON.stringify({ 
      items,
      data: { patientId: String(patientId) }
    });
    return await apiRequest(this.resourceType, url, { method: "POST", body });
  }

  /**
   * Send the plan to the patient (email/SMS per backend implementation).
   */
  async sendToPatient(patientId, items) {
    if (!patientId) return { success: false };
    const endpoint = buildResourcesEndpoint("/send");
    const query = new URLSearchParams({ resource_id: String(patientId) }).toString();
    const url = `${endpoint}?${query}`;
    
    // Include patientId in the data field since resourceId is generated by another server
    const body = JSON.stringify({ 
      items,
      data: { patientId: String(patientId) }
    });
    return await apiRequest(this.resourceType, url, { method: "POST", body });
  }
}

export default DentalPlanService;
